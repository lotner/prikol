// То, где хранится HTML-содержимое с обхода дерева
var c = '';

// Функция рекурсивного обхода дерева. 'a' -- узел DOM-дерева (или его firstChild), 'b' -- уровень вложенности (используется для пробелов отступа)
function output(a, b) {
    // Если узел не null и является именно DOM-узлом
    if (a && a.nodeType === 1) {
        // Обходим по дочерним элементам 'a'
        let v = a.firstChild;

        // Пока у него есть дети
        while (v) {
            // Если ребенок тоже DOM-узел
            if (v.nodeType === 1) {
                // Выводим отладочно его название в консоль (требуется по условию)
                console.log(v.tagName);

                // Составляем количество отступов для элемента в зависимости от его уровня вложенности
                let d = '';
                for (let i = 0; i < b; i++) {
                    d += '&nbsp;&nbsp;';
                }

                // Выводим отступы + имя тега + перенос строки
                c += `${d}${v.tagName}<br/>`;

                // Вызываем рекурсивный обход для текущего дочернего у узла 'a' с следующим уровнем вложенности
                output(v, b + 1);
            }

            // Обходим следующего ребенка 'a'
            v = v.nextSibling;
        }
    }
}


// То, что вызывается на нажатие кнопочки
function div() {
    // Создаем тот div, согласно условию, где будет находиться вывод по обходу DOM-дерева
    let div = document.createElement('div');

    // Выполняем обход дерева -- результат будет в глобальной переменной 'c'
    output(document.children[0], 0);

    // Добавляем созданный div на страницу (в конец document.body) после обхода дерева -- это сделано для того, чтобы не учитывать его при обходе дерева
    document.children[0].appendChild(div);

    // Добавляем HTML-содержимое в div -- браузер все отрендерит после этого
    div.innerHTML = c;

    // Отключаем кнопочку, чтобы не порушить магию
    document.getElementById('btn').disabled = true;
}
